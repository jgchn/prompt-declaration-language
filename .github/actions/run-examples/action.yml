name: 'Ollama Setup'
description: 'Composte action to set up Run Examples'
inputs:
  python-version:
    description: 'Python version'
    required: true
    default: '3.11'
  runner-os:
    description: 'Runner OS'
    required: true
  update-results:
    description: 'Whether to update the results for this run. Must be False for nightly runs'
    required: true
  github-actor-id:
    description: 'Github actor ID if commit changes'
    required: false
  github-actor:
    description: 'Github actor if commit changes'
    required: false
  github-token:
    description: 'Github token for commits and push'
    required: false
  github-repository:
    description: 'Github repository'
    required: false
  check:
    description: 'Files to patch tests/test_examples_run.yaml with. These are the PDL files that the test will run against. Defaults to all PDL files.'
    required: false
    default: ''
  head-ref:
    description: 'Head ref of the repo'
    required: true
  last-job: 
    description: 'True if this is the last matrix job, required sequential execution for writing results'
    required: false 
    default: 'false' 
# outputs:
#   new-results-json: 
#     description: "A JSON output of the new results to push, maps filename to file content"
#     value: 
    
runs:
  using: 'composite'
  steps:
    # Set up Ollama
    - uses: ./.github/actions/ollama

    # Configure Run Examples environment
    - uses: actions/checkout@v4
      with:
        ref: ${{ inputs.head-ref }}
    - name: Patch tests/test_examples_run.yaml with modified files
      if: ${{ inputs.check != '' }}
      uses: fjogeleit/yaml-update-action@main
      with:
        changes: |
          {
            "tests/test_examples_run.yaml": {
                "check": ${{ inputs.check }}
              }
          }
        commitChange: false
    - name: Print test Run Examples config
      shell: bash
      run: cat tests/test_examples_run.yaml

    # Run tests
    - name: Set up Python ${{ inputs.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}
    - name: Cache pip
      uses: actions/cache@v4
      with:
        # This path is specific to Ubuntu
        path: ${{ env.pythonLocation }}
        # Look to see if there is a cache hit for the setup file
        key: ${{ inputs.runner-os }}-pip-new3-${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}
        restore-keys: |
          ${{ inputs.runner-os }}-pip-new3
          ${{ inputs.runner-os }}-new3
    - name: Install dependencies
      shell: bash
      run: pip install --upgrade --upgrade-strategy eager .[all]
    - name: Pip list packages
      shell: bash
      run: pip list
    # - name: Show pip dependencies
    #   shell: bash
    #   run: |
    #     pip install pipdeptree
    #     pipdeptree -fl
    - name: Run tests
      shell: bash
      run: |
        cat tests/test_examples_run.yaml        
        (
          set +e
          py.test -v --capture=tee-sys -rfE -s tests/test_examples_run.py --disable-pytest-warnings
          EXIT_CODE=$?

          if [ $EXIT_CODE -eq 0 ]; then
            echo "TEST_RESULT=PASSED" >> $GITHUB_ENV
          else
            echo "TEST_RESULT=FAILED" >> $GITHUB_ENV
          fi
        )
    
    # # Commit the results if update results
    # - name: Push new results to branch
    #   shell: bash
    #   if: ${{ inputs.update-results == 'true' }}
    #   run: |
    #     git config --local user.name github-actions[bot]
    #     git config --local user.email 41898282+github-actions[bot]@users.noreply.github.com
    #     git status
    #     git pull
    #     # git add tests/test_examples_run.yaml
    #     git add tests/results/
    #     git diff --cached --quiet || git commit -s -m "github-actions[bot]: Updated results file when running examples on $(date)"
    #     git push
      
    # # Patch config with update_results to false
    # - name: Patch tests/test_examples_run.yaml with update_results to False, only for the last matrix version
    #   if: ${{ inputs.update-results == 'true' && inputs.last-job == 'true' }}
    #   uses: fjogeleit/yaml-update-action@main
    #   with:
    #     changes: |
    #       {
    #         "tests/test_examples_run.yaml": {
    #             "update_results": false
    #           }
    #       }
    #     commitChange: false
        # createPR: false
        # branch: ${{ inputs.head-ref }}
        # masterBranchName: ${{ inputs.head-ref }}
        # message: "Reverting update_results to False. If you wish to update again, change locally and push with change."
        # token: ${{ inputs.github-token }}
        # repository: ${{ inputs.github-repository }}
        # commitUserEmail: ${{ inputs.github-actor-id }}+github-actions[bot]${{ inputs.github-actor }}@users.noreply.github.com
    # - name: Commit changes to run-examples config 
    #   if: ${{ inputs.update-results == 'true' && inputs.last-job == 'true' }}
    #   shell: bash
    #   run: |
    #     git config --local user.name github-actions[bot]
    #     git config --local user.email 41898282+github-actions[bot]@users.noreply.github.com
    #     git status
    #     git pull
    #     git add tests/test_examples_run.yaml
    #     git diff --cached --quiet || git commit -s -m "Reverting update_results to False."
    #     git push
    # - name: 
    # - name: Push new results to branch
    #   shell: bash
    #   if: ${{ inputs.update-results == 'true' }}
    #   run: |
    #     git config --local user.name github-actions[bot]
    #     git config --local user.email "${{ github.actor_id }}+github-actions[bot]${{ github.actor }}@users.noreply.github.com"
    #     git status
    #     git pull
    #     git add tests/results/
    #     git diff --cached --quiet || git commit -s -m "github-actions[bot]: Updated results file when running examples on $(date)"
    #     git push
 
    - name: Check if pytest passed
      shell: bash
      run: |
        echo $TEST_RESULT